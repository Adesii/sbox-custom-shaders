//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Grass Shader";
	DevShader = true;
	DebugInfo = false;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
	//Feature(F_ADDITIVE_BLEND, 0..1, "Blending");
	//Feature( F_ALPHA_TEST, 0..1, "Rendering" );
    //Feature( F_TRANSMISSIVE, 0..1, "Rendering" );

	Feature(F_TRIPLANAR_GROUND, 0..2(0="UV Blend",1="Color", 2="Triplanar"), "Ground");

	Feature(F_USE_BLADE_TEXTURE_AS_COLOR, 0..1, "Grass");
    Feature( F_PREPASS_ALPHA_TEST, 0..1 );



	Feature( F_ALPHA_TEST, 0..1, "Rendering" );
    Feature( F_ALPHA_CULLING, 0..1, "Rendering" );
	FeatureRule( Requires1( F_ALPHA_CULLING, F_ALPHA_TEST ), "Requires alpha testing" );

	
	//Feature( F_HIGH_QUALITY_REFLECTIONS, 0..1, "Rendering" );

	// 5 layers puts too much pressure into registers, I'm keeping it to 4 but modders can experiment with it
    Feature( F_MULTIBLEND, 0..3 ( 0="1 Layers", 1="2 Layers", 2="3 Layers", 3="4 Layers" ), "Number Of Blendable Layers" );
	//Feature( F_USE_TINT_MASKS_IN_VERTEX_PAINT, 0..1, "Use Tint Masks In Vertex Paint" );
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 										// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view

	//Reflection( "high_quality_reflections.vfx" );
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"


	float3 BaseColor<UiType(Color);UiGroup("Blade,10/Colors,10/1");Default3(0.0196078,0.333333,0.0666667);>;
	float3 TipColor<UiType(Color);UiGroup("Blade,10/Colors,10/2");Default3(0.192157,0.882353,0.203922);>;


	float GrassThreshold<UiType(Slider);Range(-0.1,1);Default(0.5);>;
	float GrassFalloff<UiType(Slider);UiGroup("Blade,10/Grass,10/1");Range(0,0.5);Default(0.05);>;


	

	

	#define CULL_MODE_ALREADY_SET
	#define BLEND_MODE_ALREADY_SET


	#define VS_INPUT_HAS_TANGENT_BASIS 1
    #define PS_INPUT_HAS_TANGENT_BASIS 1

	#define BLADE_SEGMENTS 4

	#define DISTANCE_BASED_TESS 1
	#define NO_TESSELATION 0

	#define ENABLE_BINDLESS_RUNTIME
	#define S_GGX_SHADING 1
	#define S_SPECULAR 1
	#define S_METALNESS_TEXTURE 0
	#define S_SPECULAR_CUBE_MAP 1
	#define S_TRANSLUCENT 0

	//#define D_BAKED_LIGHTING_FROM_PROBE 1
}

//=========================================================================================================================

struct VertexInput
{
	float4 vColorBlendValues : TEXCOORD4 < Semantic( VertexPaintBlendParams ); >;
	float4 vColorPaintValues : TEXCOORD5 < Semantic( VertexPaintTintColor ); >;
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "Grass/fancy_grass.pixelinput.hlsl"
	
};

//=========================================================================================================================
struct GeometryInput
{
	#include "Grass/fancy_grass.pixelinput.hlsl"
};

struct HullInput
{
    #include "Grass/fancy_grass.pixelinput.hlsl"
};

struct HullOutput
{
    #include "Grass/fancy_grass.pixelinput.hlsl"
};

struct HullPatchConstants
{
	float Edge[3] : SV_TessFactor;
	float Inside : SV_InsideTessFactor;
};

struct DomainInput
{
	#include "Grass/fancy_grass.pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"

	BoolAttribute( VertexPaintUI2Layer, F_MULTIBLEND == 1 );
	BoolAttribute( VertexPaintUI3Layer, F_MULTIBLEND == 2 );
	BoolAttribute( VertexPaintUI4Layer, F_MULTIBLEND == 3 );
	BoolAttribute( VertexPaintUI5Layer, F_MULTIBLEND == 4 );
	BoolAttribute( VertexPaintUIPickColor, true );

	StaticCombo( S_MULTIBLEND, F_MULTIBLEND, Sys( PC ) );
	#if S_MULTIBLEND >= 1
	float g_flGrassModifierB < Default( 1 ); Range( 0, 1.0 ); UiGroup( "Material B,90" ); >;
	#if S_MULTIBLEND >= 2
	float g_flGrassModifierC < Default( 1 ); Range( 0, 1.0 ); UiGroup( "Material C,90" ); >;
	#if S_MULTIBLEND >= 3
	float g_flGrassModifierD < Default( 1 ); Range( 0, 1.0 ); UiGroup( "Material D,90" ); >;
	#if S_MULTIBLEND >= 4
	float g_flGrassModifierE < Default( 1 ); Range( 0, 1.0 ); UiGroup( "Material E,90" ); >;
	#endif
	#endif
	#endif
	#endif


	

	
	//BoolAttribute( UsesHighQualityReflections, ( F_HIGH_QUALITY_REFLECTIONS > 0 ) );
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );

		o.vBlendValues = i.vColorBlendValues;
        o.vPaintValues = i.vColorPaintValues;
		o.vGrassValues = float4(0,0,0,0);
		#if S_MULTIBLEND >= 1
		o.vGrassValues.x = g_flGrassModifierB;
		#if S_MULTIBLEND >= 2
		o.vGrassValues.y = g_flGrassModifierC;
		#if S_MULTIBLEND >= 3
		o.vGrassValues.z = g_flGrassModifierD;
		#if S_MULTIBLEND >= 4
		o.vGrassValues.w = g_flGrassModifierE;
		#endif
		#endif
		#endif
		#endif

		return FinalizeVertex(o);
	}
}

HS
{
	#include "common/hull.hlsl"
	#include "Grass/fancy_grass.tesselation.hlsl"
}

DS
{
	#include "Grass/fancy_grass.tesselation.hlsl"
}

//=========================================================================================================================

GS
{
	StaticCombo( S_MULTIBLEND, F_MULTIBLEND, Sys( PC ) );
	//StaticCombo( S_HIGH_QUALITY_REFLECTIONS, F_HIGH_QUALITY_REFLECTIONS, Sys( PC ) ); // Indicate that Shader supports high quality reflections
	StaticCombo(S_USE_BLADE_TEXTURE,F_USE_BLADE_TEXTURE_AS_COLOR,Sys(PC));
	#include "Grass/fancy_grass.Geometry.hlsl"
}

//=========================================================================================================================

PS
{

	

	//
	// Combos
	//
	StaticCombo( S_MULTIBLEND, F_MULTIBLEND, Sys( PC ) );
	
    //StaticCombo( S_USE_TINT_MASKS_IN_VERTEX_PAINT, F_USE_TINT_MASKS_IN_VERTEX_PAINT, Sys( PC ) );


	StaticCombo( S_ALPHA_TEST, F_ALPHA_TEST, Sys( ALL ) );


	#include "common/pixel.blend.hlsl"

	RenderState( BlendEnable,  false );
	RenderState( SrcBlend, ONE );
	RenderState( DstBlend, ZERO );

	RenderState(CullMode,NONE);


	RenderState( DepthBias, -10 ); // Value is steps in depth buffer (i.e. out of 2^24 if the depth buffer is 24 bit)
	RenderState( SlopeScaleDepthBias, -0.2 );


	
	//StaticCombo( S_HIGH_QUALITY_REFLECTIONS, F_HIGH_QUALITY_REFLECTIONS, Sys( PC ) ); // Indicate that Shader supports high quality reflections


	StaticCombo( S_TRIPLANAR, F_TRIPLANAR_GROUND, Sys( PC ) );
	StaticCombo(S_USE_BLADE_TEXTURE,F_USE_BLADE_TEXTURE_AS_COLOR,Sys(PC));

	CreateInputTexture2D(BladeTexture,Srgb,8,"","_color","Blade,10/Colors,10/1",Default3( 1.0, 1.0, 1.0 ) );
	CreateTexture2DWithoutSampler( g_tBladeTexture )  < Channel( RGBA,  Box( BladeTexture ), Srgb ); OutputFormat( BC7 ); SrgbRead( true ); >;

	
	//#if ( S_MODE_TOOLS_WIREFRAME )
	//{
	//RenderState( FillMode, WIREFRAME );
	//}
	//#endif

	#include "Grass/fancy_grass.blend.hlsl"

	//
	// Main
	//
	PixelOutput MainPs( PixelInput i )
	{
		//Material m = GatherMaterial(i);
		#if S_TRIPLANAR == 0
			Material m = ToMaterialMultiblend(i.vTextureCoords,i);
		#elif S_TRIPLANAR == 1
			Material m = ToMaterial(float4(Tex2DS(g_tColorA,TextureFiltering,i.vTextureCoords).rgb,1),Tex2DS( g_tNormalA, TextureFiltering, i.vTextureCoords  ),float4(1,0,1,0));
		#else
			Material m = TriplanarToMaterialMultiblend(i);
		#endif


		if(i.vBladeUV.x != 0 && i.vBladeUV.y != 0){
			float4 vAlbedo = Tex2DS( g_tBladeTexture, TextureFiltering, i.vBladeUV  ); 
			#if S_USE_BLADE_TEXTURE == 0
				vAlbedo.a = 1;
			#endif
			#if S_ALPHA_TEST
				if( vAlbedo.a < g_flAlphaTestReference )
				{
					discard;
				}
			#endif
			#if S_USE_BLADE_TEXTURE == 0
				vAlbedo.rgb *= saturate( lerp(  TipColor,BaseColor, clamp(i.vBladeUV.y,0,1) )).rgb;
			#else
				vAlbedo.rgb *= saturate(BaseColor).rgb;
			#endif

			m.Albedo = vAlbedo;
			#if S_ALPHA_TEST
				m.Opacity = vAlbedo.a;
			#else
				m.Opacity = 1.0f;
			#endif

		}

		return FinalizePixelMaterial( i, m );
	}
}